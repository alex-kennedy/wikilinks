###########################################################
# After generating this config file and modifying it, you 
# can usually just run LGL with the command:
# lgl.pl -c config_file_name
#
# You can also modify the defaults in lgl.pl instead of
# using this config file.
#
# If you want to use the defaults given in lgl.pl just
# set any entry in here to ''. (The empty string)
#
# All values must be quote delimited, and key/values must
# be separated by a "=" (without the quotes). Values also
# can not have quotes in them.
#
# All paths should be absolute.
###########################################################

# The output directory for all the LGL results. Note that
# several files and subdirectories will be generated.
# This has to be a valid directory name.
tmpdir = '/output'

# The edge file to use for the layout. Has to be a file readable
# by LGLFormatHandler.pm. It has to be an existing/valid file name,
# with the absolute path.
inputfile = '/input/pagelinks.lgl'

# The output file that will have the final coordinates of
# each vertex. This has to be a valid file name, and it
# will be place in 'tmpdir'. This really does not have to
# be changed.
finaloutcoords = 'final.coords'

# Layout only the MST that lglayout generated, and NOT the
# entire graph. This can be '0' or '1' or '' (default) 
treelayout = '0'

# Use the given edge weights in the edge file to generate
# the MST. This can be '0' or '1' or '' (default) 
useoriginalweights = '0'

# Output the level of each vertex in the layout tree, which
# is usually just the MST. This can be '0' or '1' or '' (default) 
edgelevelmap = '1'

# Output the MST that was generated as an .lgl edge file. 
# This can be '0' or '1' or '' (default) 
outputmst = '1'

# The number of threads for lglayout to spawn for the layout.
# This will only make a difference for graphs having several
# thousands of edges and with the threadcount == processor count
# lglayout will cap this value to the processor count.
threadcount = '8'

# The dimension of the layout you want. Can only be '2' or '3'
dimension = '2'

# Cutoff value for weights. Any edge with a weight value greater
# than cutoff will be dropped. The empty string means keep ALL
# edges. This can be a valid float or ''.
cutoff = ''

# Use only the MST to begin with. lglbreakup generates the MST
# which are fed into lglayout. The provided edges must have weights.
# This is beneficial for HUGE graphs with millions of edges. 
# Doing the MST at the lglbreakup will save time later on down
# the road, not to mention less I/O. This will only do a layout
# of the MST.
# This can be '0' or '1' or '' (default).
usemst = '0'

# This will cut back on some of the output/progress reports,
# and make it a little quieter. '0' is verbose while '1' is
# not.
issilent = '0'

# If an LGL run was interrupted, the pickupdir is the dir
# where the simulation left off.
pickupdir = ''

# integratetype is the method for integrating all the individual
# layouts. By default, a 'funnel' is used, but if you want a DLA 
# integration then set this to '-d'. Currently, only two types
# of integration exist.
integratetype = ''

# By specifying a placement distance, you determine the distance
# of separation of the next level placement. This can be
# a + float value, but set to '' if you want to use the default
# calculated distance. EXPERIMENTAL
placmentdistance = ''

# The placement of a subsequent level is done by placing the nodes
# on a circle perimeter. This value determines the radius of that
# circle. Therefore smaller values will make the initial placements
# very tight. This can be any + float or '' for default. EXPERIMENTAL
placementradius = ''

# The placement distance of subsequent levels is usually done by 
# solving a formula based on how many vertices there are. However
# if you have a tree you may want to place vertices that are all
# leafs "on top of" the parent vertex.  This might produce better
# images for trees than for graphs.  This can be '0' or '1' or '' 
# (default). EXPERIMENTAL
placeleafsclose = '0'

# Binaries location.
lgldir = '/lgl/bin'
